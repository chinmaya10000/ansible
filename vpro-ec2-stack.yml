--- 
- hosts: localhost
  connection: local 
  gather_facts: false
  tasks:
  - name: Import vpc variable files
    ansible.builtin.include_vars: vars/output_vars
  - name: Import vprofile setupvariable 
    ansible.builtin.include_vars: vars/vprostacksetup

  - name: create vprofile EC2 key pair 
    amazon.aws.ec2_key:
      name: vprokey
      region: "{{region}}"
    register: vprokey_out

  - name: store private key into file loginkey_vpro.pem
    copy:
      content: "{{vprokey_out.key.private_key}}"
      dest: ./loginkey_vpro.pem
      mode: 0600
    when: vprokey_out.changed

  - name: Create sg for Load Balancer
    ec2_group:
      name: vpeoELB-sg
      description: Allow port 80 from every where and all port within sg 
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
    register: vproELBSG_out

  - name: Create sg for vprofile stack
    ec2_group:
      name: vpeoStack-sg
      description: Allow port 22 from every where and all port within sg 
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      purge_rules: no
      rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        group_id: "{{vproELBSG_out.group_id}}"
      
      - proto: tcp
        from_port: 22
        to_port: 22
        group_id: "{{BastionSGid}}"
    register: vproStackSG_out

  - name: Create sg for vprofile stack
    ec2_group:
      name: vpeoStack-sg
      description: Allow port 22 from every where and all port within sg 
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      purge_rules: no
      rules:
      - proto: all 
        group_id: "{{vproStackSG_out.group_id}}"

  - name: Creating Nginx web01
    amazon.aws.ec2_instance:
      name: "web01"
      region: "{{region}}"
      key_name: "vprokey"
      vpc_subnet_id: "{{privsub1id}}"
      instance_type: t2.micro
      security_group: "{{vproStackSG_out.group_name}}"
      wait: yes
      wait_timeout: 300
      network:
        assign_public_ip: true
      image_id: "{{nginx_ami}}"
      tags:
        Environment: Vprofile
    register: web01_out

  - name: Creating tomcat app01
    amazon.aws.ec2_instance:
      name: "app01"
      region: "{{region}}"
      key_name: "vprokey"
      vpc_subnet_id: "{{privsub1id}}"
      instance_type: t2.micro
      security_group: "{{vproStackSG_out.group_name}}"
      wait: yes
      wait_timeout: 300
      network:
        assign_public_ip: true
      image_id: "{{tomcat_ami}}"
      tags:
        Environment: Vprofile
    register: app01_out

  - name: Creating memcache mc01
    amazon.aws.ec2_instance:
      name: "mc01"
      region: "{{region}}"
      key_name: "vprokey"
      vpc_subnet_id: "{{privsub1id}}"
      instance_type: t2.micro
      security_group: "{{vproStackSG_out.group_name}}"
      wait: yes
      wait_timeout: 300
      network:
        assign_public_ip: true
      image_id: "{{memcache_ami}}"
      tags:
        Environment: Vprofile
    register: mc01_out

  - name: Creating RabbitMQ rmq01
    amazon.aws.ec2_instance:
      name: "rmq01"
      region: "{{region}}"
      key_name: "vprokey"
      vpc_subnet_id: "{{privsub1id}}"
      instance_type: t2.micro
      security_group: "{{vproStackSG_out.group_name}}"
      wait: yes
      wait_timeout: 300
      network:
        assign_public_ip: true
      image_id: "{{rmq_ami}}"
      tags:
        Environment: Vprofile
    register: rmq01_out

  - name: Creating Mysql db01
    amazon.aws.ec2_instance:
      name: "db01"
      region: "{{region}}"
      key_name: "vprokey"
      vpc_subnet_id: "{{privsub1id}}"
      instance_type: t2.micro
      security_group: "{{vproStackSG_out.group_name}}"
      wait: yes
      wait_timeout: 300
      network:
        assign_public_ip: true
      image_id: "{{mysql_ami}}"
      tags:
        Environment: Vprofile
    register: db01_out

  
  - debug: 
      var: db01_out.instances[0].instance_id

  - local_action:
      module: ec2_elb_lb
      name: "vprofile-elb"
      region: "{{region}}"
      state: present 
      instance_ids:
      - "{{web01_out.instances[0].instance_id}}"
      purge_instance_ids: true 
      security_group_ids: "{{vproELBSG_out.group_id}}"
      subnets:
      - "{{pubsub1id}}"
      - "{{pubsub2id}}"
      - "{{pubsub3id}}"
      listeners:
      - protocol: http 
        load_balancer_port: 80
        instance_port: 80

  - name: Insert host IP & name in a file provision-stack/group_vars/hostip
    blockinfile:
      path: provision-stack/group_vars/hostip
      block: |
        web01_ip: {{web01_out.instances[0].private_ip}}
        app01_ip: {{app01_out.instances[0].private_ip}}
        rmq01_ip: {{rmq01_out.instances[0].private_ip}}
        mc01_ip: {{mc01_out.instances[0].private_ip}}
        db01_ip: {{db01_out.instances[0].private_ip}}

  - name: Copy login key to provision-stack/inventory-vpro
    copy:
      src: loginkey_vpro.pem
      dest: provision-stack/loginkey_vpro.pem
      mode: '0400'

  - name: Insert Inventory file provision-stack/inventory-vpro
    blockinfile: 
      path: provision-stack/inventory-vpro
      block: |
        web01 ansible_host={{web01_out.instances[0].private_ip}}
        app01 ansible_host={{app01_out.instances[0].private_ip}}
        rmq01 ansible_host={{rmq01_out.instances[0].private_ip}}
        mc01 ansible_host={{mc01_out.instances[0].private_ip}}
        db01 ansible_host={{db01_out.instances[0].private_ip}}
        cntl ansible_host=127.0.0.1 ansible_connection=local 

        [websrvgrp]
        web01 

        [appsrvgrp]
        app01 

        [rmqsrvgrp]
        rmq01 

        [mcsrvgrp]
        mc01 

        [dbsrvgrp]
        db01 

        [control]
        cntl 

        [stack_inst:children]
        websrvgrp
        appsrvgrp
        rmqsrvgrp
        mcsrvgrp
        dbsrvgrp
        control

        [stack_inst:vars]
        ansible_user=ubuntu
        ansible_ssh_private_key_file=loginkey_vpro.pem
        #ansible_python_interpreter=/usr/bin/python3

  